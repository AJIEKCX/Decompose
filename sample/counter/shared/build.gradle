if (!setupMultiplatform(project, [Target.ANDROID, Target.IOS, Target.JS_IR, Target.WATCHOS])) {
    return
}

doIfAndroidEnabled(project) {
    plugins.apply("kotlin-parcelize")
    setupCompose(project)
    setupComposeMppWorkaround(project)
}

kotlin {
    doIfIosEnabled(project) {
        ios {
            binaries {
                framework {
                    baseName = "Counter"
                    transitiveExport = true
                    export(project(":decompose"))
                }
            }
        }
    }

    doIfWatchosEnabled(project) {
        watchos {
            binaries {
                framework {
                    baseName = "Counter"
                    export(project(":decompose"))
                }
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                api project(':decompose')
                implementation "com.badoo.reaktive:reaktive:$reaktiveVersion"
            }
        }

        androidMain {
            dependencies {
                implementation project(':extensions-compose-jetpack')
                implementation project(':extensions-android')
                implementation "androidx.compose.foundation:foundation:$composeJetpackVersion"
                implementation "androidx.compose.material:material:$composeJetpackVersion"
                implementation "com.google.android.material:material:$androidMaterialVersion"
            }
        }

        jsMain {
            dependencies {
                implementation "org.jetbrains.kotlin-wrappers:kotlin-react:$jsKotlinReactVersion"
                implementation "org.jetbrains.kotlin-wrappers:kotlin-styled:$jsKotlinStyledVersion"
                implementation "com.ccfraser.muirwik:muirwik-components:$jsMuirwikVersion"
            }
        }
    }
}

static String getIosTargetName() {
    def sdkName = System.getenv("SDK_NAME") ?: "iphonesimulator"
    return "ios" + (sdkName.startsWith("iphoneos") ? "Arm64" : "X64")
}

doIfIosEnabled(project) {
    task packForXcode(type: Sync) {
        group = "build"
        def mode = System.getenv("CONFIGURATION")
        if (mode == null) {
            mode = "DEBUG"
        }
        def targetName = getIosTargetName()
        def framework = kotlin.targets.getByName(targetName).binaries.getFramework(mode)
        inputs.property("mode", mode)
        dependsOn(framework.linkTask)
        def targetDir = new File(buildDir, "xcode-frameworks")
        from(framework.outputDirectory)
        into(targetDir)
    }
}

static String getWatchosTargetName() {
    def sdkName = System.getenv("SDK_NAME") ?: "watchsimulator"
    def ret = "watchos" + (sdkName.startsWith("watchos") ? "Arm64" : "X64")
    print("watchOsTarget: " + ret)
    return ret
}

doIfWatchosEnabled(project) {
    task packForXcodeWatch(type: Sync) {
        group = "build"
        def mode = System.getenv("CONFIGURATION")
        if (mode == null) {
            mode = "DEBUG"
        }
        def targetName = getWatchosTargetName()
        def framework = kotlin.targets.getByName(targetName).binaries.getFramework(mode)
        inputs.property("mode", mode)
        dependsOn(framework.linkTask)
        def targetDir = new File(buildDir, "xcode-frameworks-watchos")
        from(framework.outputDirectory)
        into(targetDir)
    }
}
