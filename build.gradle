import com.arkivanov.*

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        mavenCentral()
        google()
        maven { url "https://maven.pkg.jetbrains.space/public/p/compose/dev" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.compose:compose-gradle-plugin:$composeJetbrainsVersion"
    }
}

allprojects {
    repositories {
        mavenCentral()
        google()
        maven { url "https://maven.pkg.jetbrains.space/public/p/compose/dev" }
    }
}

boolean setupMultiplatform(
        Project project,
        Target... targets = Targets.allDefault()
) {
    setRequiredTargets(project, targets.toList())

    if (!targets.any { isTargetEnabled(it.class) }) {
        return false
    }

    doIfAndroidEnabled(project) {
        project.plugins.apply("com.android.library")
    }

    project.plugins.apply("kotlin-multiplatform")

    setupMultiplatformCommon(project)

    doIfAndroidEnabled(project) {
        setupMultiplatformAndroid(project)
        setupAndroid(project)
    }

    doIfJvmEnabled(project) {
        setupMultiplatformJvm(project)
    }

    doIfIosEnabled(project) {
        setupMultiplatformIos(project, it)
    }

    doIfMacosEnabled(project) {
        setupMultiplatformMacos(project)
    }

    doIfWatchosEnabled(project) {
        setupMultiplatformWatchos(project, it)
    }

    doIfTvosEnabled(project) {
        setupMultiplatformTvos(project)
    }

    doIfJsEnabled(project) {
        setupMultiplatformJs(project, it)
    }

    return true
}

private void setupMultiplatformCommon(Project project) {
    project.kotlin {
        sourceSets {
            commonMain {
                dependencies {
                    implementation kotlin("stdlib")
                }
            }

            commonTest {
                dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-test-common:$kotlinVersion"
                    implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlinVersion"
                }
            }

            nonAndroidMain {
                dependsOn commonMain
            }

            nonAndroidTest {
                dependsOn commonTest
            }

            nativeMain {
                dependsOn commonMain
            }

            nativeTest {
                dependsOn commonTest
            }

            nonNativeMain {
                dependsOn commonMain
            }

            nonNativeTest {
                dependsOn commonTest
            }
        }
    }
}

private void setupMultiplatformAndroid(Project project) {
    project.kotlin {
        android()

        sourceSets {
            androidMain {
                dependsOn nonNativeMain
            }

            androidTest {
                dependsOn nonNativeTest

                dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
                }
            }
        }
    }
}

private void setupMultiplatformJvm(Project project) {
    project.kotlin {
        jvm()

        sourceSets {
            jvmMain {
                dependsOn nonAndroidMain
                dependsOn nonNativeMain
            }

            jvmTest {
                dependsOn nonAndroidTest
                dependsOn nonNativeTest

                dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
                }
            }
        }
    }
}

private void setupMultiplatformJs(Project project, Js target) {
    project.kotlin {
        js(target.mode == Js.Mode.BOTH ? BOTH : (target.mode == Js.Mode.IR ? IR : LEGACY)) {
            browser()
            nodejs()
        }

        sourceSets {
            jsMain {
                dependsOn nonAndroidMain
                dependsOn nonNativeMain
            }

            jsTest {
                dependsOn nonAndroidTest
                dependsOn nonNativeTest

                dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-test-js:$kotlinVersion"
                }
            }
        }
    }
}

private void setupMultiplatformIos(Project project, Ios target) {
    project.kotlin {
        ios {
            if (target.binaries != null) {
                target.binaries.delegate = binaries
                target.binaries()
            }
        }

        sourceSets {
            iosMain {
                dependsOn nonAndroidMain
                dependsOn nativeMain
            }

            iosTest {
                dependsOn nonAndroidTest
                dependsOn nativeTest
            }
        }
    }
}

private void setupMultiplatformWatchos(Project project, Watchos target) {
    project.kotlin {
        watchos {
            if (target.binaries != null) {
                target.binaries.delegate = binaries
                target.binaries()
            }
        }

        sourceSets {
            watchosMain {
                dependsOn nonAndroidMain
                dependsOn nativeMain
            }

            watchosTest {
                dependsOn nonAndroidTest
                dependsOn nativeTest
            }
        }
    }
}

private void setupMultiplatformTvos(Project project) {
    project.kotlin {
        tvos()

        sourceSets {
            tvosMain {
                dependsOn nonAndroidMain
                dependsOn nativeMain
            }

            tvosTest {
                dependsOn nonAndroidTest
                dependsOn nativeTest
            }
        }
    }
}

private void setupMultiplatformMacos(Project project) {
    project.kotlin {
        macosX64()

        sourceSets {
            macosX64Main {
                dependsOn nonAndroidMain
                dependsOn nativeMain
            }

            macosX64Test {
                dependsOn nonAndroidTest
                dependsOn nativeTest
            }
        }
    }
}

void setupCompose(Project project) {
    project.android {
        kotlinOptions {
            useIR = true
        }

        buildFeatures {
            compose true
        }

        composeOptions {
            kotlinCompilerExtensionVersion composeJetpackVersion
            kotlinCompilerVersion kotlinVersion
        }
    }
}

// As per KT-38694 (https://github.com/avdim/compose_mpp_workaround)
void setupComposeMppWorkaround(Project project) {
    project.with {
        configurations {
            create("composeCompiler") {
                setCanBeConsumed(false)
            }
        }

        dependencies {
            composeCompiler "androidx.compose.compiler:compiler:$composeJetpackVersion"
        }

        afterEvaluate {
            def composeCompilerJar = project.configurations.getByName("composeCompiler").resolve().getAt(0)
            if (composeCompilerJar == null) {
                throw new Exception("Please add \"androidx.compose.compiler:compiler\" (and only that) as a \"composeCompiler\" dependency")
            }

            project.tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile.class) {
                kotlinOptions.freeCompilerArgs += ["-Xuse-ir", "-Xplugin=$composeCompilerJar"]
            }
        }
    }
}

private void setupAndroid(Project project) {
    project.android {
        compileSdkVersion 30
        buildToolsVersion "30.0.2"

        defaultConfig {
            minSdkVersion 21
            targetSdkVersion 30
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        kotlinOptions {
            jvmTarget = '1.8'
        }
    }
}

void setupMultiplatformPublications(Project project) {
    project.with {
        plugins.apply('maven-publish')

        group = "com.arkivanov.decompose"
        version = decomposeVersion

        publishing {
            publications.withType(MavenPublication.class).all {
                setupPublicationPom(project, it)
            }
        }

        setupPublicationRepository(project)

        final isMetadata = System.getProperty("publish_metadata") != null

        final metadataPublicationNames =
                [org.jetbrains.kotlin.gradle.plugin.mpp.KotlinMultiplatformPlugin.METADATA_TARGET_NAME, "kotlinMultiplatform"]

        tasks.withType(PublishToMavenRepository.class).all {
            it.enabled = (it.publication?.name in metadataPublicationNames) == isMetadata
        }
    }
}

void setupPublicationPom(Project project, Publication publication) {
    Task javadocJar = project.tasks.findByName("javadocJar")
    if (javadocJar == null) {
        javadocJar =
                project.task("javadocJar", type: Jar) {
                    archiveClassifier.set("javadoc")
                }
    }

    publication.with {
        artifact javadocJar

        pom {
            name = "Decompose"
            description = "Kotlin Multiplatform lifecycle-aware business logic components"
            url = "https://github.com/arkivanov/Decompose"

            licenses {
                license {
                    name = "The Apache License, Version 2.0"
                    url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                }
            }

            developers {
                developer {
                    id = "arkivanov"
                    name = "Arkadii Ivanov"
                    email = "arkann1985@gmail.com"
                }
            }

            scm {
                url = "https://github.com/arkivanov/Decompose"
                connection = "scm:git:git://github.com/arkivanov/Decompose.git"
                developerConnection = "scm:git:git://github.com/arkivanov/Decompose.git"
            }
        }
    }
}

private void setupPublicationRepository(Project project) {
    project.with {
        plugins.apply("signing")

        publishing {
            signing {
                useInMemoryPgpKeys(System.getenv("SIGNING_KEY"), System.getenv("SIGNING_PASSWORD"))
                sign(publications)
            }

            repositories {
                maven {
                    url = "https://oss.sonatype.org/service/local/staging/deployByRepositoryId/${System.getenv("SONATYPE_REPOSITORY_ID")}"
                    credentials {
                        username = "arkivanov"
                        password = System.getenv("SONATYPE_PASSWORD")
                    }
                }
            }
        }
    }
}

static void doIfAndroidEnabled(Project project, Closure block) {
    doIfTargetEnabled(project, Android.class, block)
}

static void doIfJvmEnabled(Project project, Closure block) {
    doIfTargetEnabled(project, Jvm.class, block)
}

static void doIfJsEnabled(Project project, Closure block) {
    doIfTargetEnabled(project, Js.class, block)
}

static void doIfIosEnabled(Project project, Closure block) {
    doIfTargetEnabled(project, Ios.class, block)
}

static void doIfWatchosEnabled(Project project, Closure block) {
    doIfTargetEnabled(project, Watchos.class, block)
}

static void doIfTvosEnabled(Project project, Closure block) {
    doIfTargetEnabled(project, Tvos.class, block)
}

static void doIfMacosEnabled(Project project, Closure block) {
    doIfTargetEnabled(project, Macos.class, block)
}

private static void doIfTargetEnabled(Project project, Class<? extends Target> clazz, Closure block) {
    if (isTargetEnabled(project, clazz)) {
        block(getRequiredTarget(project, clazz))
    }
}

private static boolean isTargetEnabled(Project project, Class<? extends Target> clazz) {
    return isTargetEnabled(clazz) && getRequiredTargets(project).any { it.class == clazz }
}

private static boolean isTargetEnabled(Class<? extends Target> clazz) {
    return clazz in getEnabledTargetClasses()
}

private static Target getRequiredTarget(Project project, Class<? extends Target> clazz) {
    return getRequiredTargets(project).find { it.class == clazz }
}

private static void setRequiredTargets(Project project, Collection<Target> targets) {
    project.ext.required_targets = targets
}

private static Collection<Target> getRequiredTargets(Project project) {
    return project.ext.required_targets
}

private static Set<Class<? extends Target>> getEnabledTargetClasses() {
    return System.getProperty("targets")
            ?.split(",")
            ?.collect(new HashSet()) { Class.forName("com.arkivanov.$it") }
            ?: Targets.allClasses()
}
