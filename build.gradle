// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {
        decompose_version = '0.1.9'
        kotlin_version = "1.4.30"
        compose_kotlin_compiler_version = kotlin_version
        compose_jetpack_version = '1.0.0-beta01'
        compose_jetbrains_version = '0.4.0-build168'
        reaktive_version = '1.1.21'
        mvikotlin_version = '2.0.0'
        androidx_appcompat_version = '1.2.0'
        androidx_core_ktx_version = '1.3.2'
        android_material_version = '1.2.1'
        androidx_lifecycle_common_java8_version = '2.2.0'
        androidx_activity_version = '1.2.0'
        androidx_activity_compose_version = '1.3.0-alpha03'
        android_material_version = '1.2.1'
        js_kotlin_react_version = '16.13.1-pre.114-kotlin-1.4.0'
        js_kotlin_react_dom_version = '16.13.1-pre.114-kotlin-1.4.0'
        js_kotlin_styled_version = '1.0.0-pre.114-kotlin-1.4.0'
        js_kotlin_css_version = '1.0.0-pre.114-kotlin-1.4.0'
        js_muirwik_version = '0.6.0'
    }
    repositories {
        google()
        jcenter()
        maven { url "https://maven.pkg.jetbrains.space/public/p/compose/dev" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.0-beta04'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.compose:compose-gradle-plugin:$compose_jetbrains_version"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url "https://maven.pkg.jetbrains.space/public/p/compose/dev" }
        maven { url "https://dl.bintray.com/cfraser/muirwik" }
    }
}

void setupMultiplatformCommon(Project project) {
    project.kotlin {
        sourceSets {
            commonMain {
                dependencies {
                    implementation kotlin("stdlib")
                }
            }

            commonTest {
                dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
                    implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
                }
            }

            nonAndroidMain {
                dependsOn commonMain
            }

            nonAndroidTest {
                dependsOn commonTest
            }

            nativeMain {
                dependsOn commonMain
            }

            nativeTest {
                dependsOn commonTest
            }

            nonNativeMain {
                dependsOn commonMain
            }

            nonNativeTest {
                dependsOn commonTest
            }
        }
    }
}

void setupMultiplatformAndroid(Project project) {
    project.kotlin {
        android()

        sourceSets {
            androidMain {
                dependsOn nonNativeMain
            }

            androidTest {
                dependsOn nonNativeTest

                dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
                }
            }
        }
    }
}

void setupMultiplatformJvm(Project project) {
    project.kotlin {
        jvm()

        sourceSets {
            jvmMain {
                dependsOn nonAndroidMain
                dependsOn nonNativeMain
            }

            jvmTest {
                dependsOn nonAndroidTest
                dependsOn nonNativeTest

                dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
                }
            }
        }
    }
}

void setupMultiplatformIos(Project project) {
    project.kotlin {
        ios()

        sourceSets {
            iosMain {
                dependsOn nonAndroidMain
                dependsOn nativeMain
            }

            iosTest {
                dependsOn nonAndroidTest
                dependsOn nativeTest
            }
        }
    }
}

void setupMultiplatformMacosX64(Project project) {
    project.kotlin {
        macosX64()

        sourceSets {
            macosX64Main {
                dependsOn nonAndroidMain
                dependsOn nativeMain
            }

            macosX64Test {
                dependsOn nonAndroidTest
                dependsOn nativeTest
            }
        }
    }
}

void setupMultiplatformTvos(Project project) {
    project.kotlin {
        tvos()

        sourceSets {
            tvosMain {
                dependsOn nonAndroidMain
                dependsOn nativeMain
            }

            tvosTest {
                dependsOn nonAndroidTest
                dependsOn nativeTest
            }
        }
    }
}

void setupMultiplatformJs(Project project, boolean isIrEnabled = true) {
    project.kotlin {
        js(isIrEnabled ? BOTH : LEGACY) {
            browser()
            nodejs()
        }

        sourceSets {
            jsMain {
                dependsOn nonAndroidMain
                dependsOn nonNativeMain
            }

            jsTest {
                dependsOn nonAndroidTest
                dependsOn nonNativeTest

                dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
                }
            }
        }
    }
}

void setupMultiplatformLinuxX64(Project project) {
    project.kotlin {
        linuxX64()

        sourceSets {
            linuxX64Main {
                dependsOn nonAndroidMain
                dependsOn nativeMain
            }

            linuxX64Test {
                dependsOn nonAndroidTest
                dependsOn nativeTest
            }
        }
    }
}


void setupCompose(Project project) {
    project.android {
        kotlinOptions {
            useIR = true
        }

        buildFeatures {
            compose true
        }

        composeOptions {
            kotlinCompilerExtensionVersion "${compose_jetpack_version}"
            kotlinCompilerVersion "${compose_kotlin_compiler_version}"
        }
    }
}

// As per KT-38694 (https://github.com/avdim/compose_mpp_workaround)
void setupComposeMppWorkaround(Project project) {
    project.configurations {
        create("composeCompiler") {
            setCanBeConsumed(false)
        }
    }

    project.dependencies {
        composeCompiler "androidx.compose.compiler:compiler:$compose_jetpack_version"
    }

    project.afterEvaluate {
        def composeCompilerJar = project.configurations.getByName("composeCompiler").resolve().getAt(0)
        if (composeCompilerJar == null) {
            throw new Exception("Please add \"androidx.compose.compiler:compiler\" (and only that) as a \"composeCompiler\" dependency")
        }

        project.tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile.class) {
            kotlinOptions.freeCompilerArgs += ["-Xuse-ir", "-Xplugin=$composeCompilerJar"]
        }
    }
}

void setupAndroid(Project project) {
    project.android {
        compileSdkVersion 30
        buildToolsVersion "30.0.2"

        defaultConfig {
            minSdkVersion 21
            targetSdkVersion 30
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        kotlinOptions {
            jvmTarget = '1.8'
        }
    }
}

void setupPublicationPom(Publication publication) {
    publication.pom {
        licenses {
            license {
                name = "The Apache License, Version 2.0"
                url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
            }
        }

        developers {
            developer {
                id = "arkivanov"
                name = "Arkadii Ivanov"
                email = "arkann1985@gmail.com"
            }
        }

        scm {
            url = "https://github.com/arkivanov/Decompose"
            connection = "scm:git:git://github.com/arkivanov/Decompose.git"
            developerConnection = "scm:git:git://github.com/arkivanov/Decompose.git"
        }
    }
}

void setupPublicationRepository(PublishingExtension publishing) {
    publishing.repositories {
        maven {
            url = "https://api.bintray.com/maven/arkivanov/maven/decompose/;publish=0;override=1"
            credentials {
                username = "arkivanov"
                password = findProperty("bintray_api_key").toString()
            }
        }
    }
}
